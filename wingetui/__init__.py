import os
import sys

if "--debugcrash" in sys.argv:
    import faulthandler
    faulthandler.enable()
    
pathIsValid = True
specialCharacter = ""
for char in sys.executable:
    if char not in "\\/:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSRTUVWXYZ1234567890_+()-., ":
        specialCharacter = char
        pathIsValid = False
        break
if not pathIsValid:
    import ctypes
    ctypes.windll.user32.MessageBoxW(None, "WingetUI can't be installed in a path containing special characters. Please reinstall WingetUI on a valid location\n\n\nCurrent path: "+os.path.dirname(sys.executable)+"\nInvalid character detected: "+specialCharacter+"\n\n\nPlease run the WingetUI installer and select a different install location. A possible valid path could be C:\Program Files\WingetUI", "WingetUI Crash handler", 0x00000010)
    sys.exit(1)
       
from upgradeAssistant import doTheMagic
# Remove old WingetUI installation
if not "AppData" in sys.executable:
    from threading import Thread
    Thread(target=doTheMagic, daemon=True).start()

def CheckProgramIntegrity():
    # BEGIN AUTOGENERATED HASH DICTIONARY
    HASHES: dict[str:str] = {
        ".\\data\\contributors.py": "097a4b7afd25f8f37ffa8b233c411e7d72e7e8e4cb0084d27bb18553e73e9714",
        ".\\data\\translations.py": "2083baf6d0bda89312d3e24c0226abf9f986c26a929e7e83e54d3bd0c81f2282",
        ".\\data\\versions.py": "d0dec5bc2768381952dc1b8093b47da9421e88505442aeab6631d0851ad08cf2",
        ".\\external\\blurwindow.py": "d68947ee90f5cbdb3d91a9bea04b7478db47082c0483bd32bd38c12cd9e8e152",
        ".\\lang\\languages.py": "30effb2fd0e6576c3332fe2bf90762cb2f225583aacc4396cca6cc5e74ce9db0",
        ".\\lang\\lang_tools.py": "1bfa049c763475e5970a6e3898996b24b62c9a3513dda415897509d8386a46c8",
        ".\\PackageManagers\\choco.py": "a2eb7595a5af854988a19f9f487a4031f46023f3d845076d987ae70f21e7a0de",
        ".\\PackageManagers\\npm.py": "da4da3281132d65fa181a008beeb10d79bc0529741302ce757d3db021d36ee73",
        ".\\PackageManagers\\PackageClasses.py": "cc5d68202719f0f88271a8924c48a6f5fe80e3950effe3a20aabfd585e6b0fcb",
        ".\\PackageManagers\\pip.py": "b6676a5b32265a81429897d8d8bae536720473afc305c9c0eee108864688d603",
        ".\\PackageManagers\\sampleHelper.py": "6261824e44b9b425b1b2d6cb3156019cab17e7f0d2101034e653143aacb2d60c",
        ".\\PackageManagers\\scoop.py": "9e99528aa204af1e24042964ffa6a90534ac8873ed58152f5d83f63c327bd867",
        ".\\PackageManagers\\winget.py": "2ff447f8184b363bb31a077b98cd557b9f3f1a74989b88856c190493413b4e3a",
        ".\\apiBackend.py": "f14c96e72e2b9a672667e317853a4a3e391c30391c2cf70972203cad8168d23b",
        ".\\customWidgets.py": "1497d464b0c13b889e6b1e64cef3f90b177e245acf5082b91480380db57db8c1",
        ".\\genericCustomWidgets.py": "86e04bc2ba58fbd7a0cf878ceacdf5061079459fcf735f7f4316f4cd3c0d88dc",
        ".\\globals.py": "6d501b019b2c1d40c6a7e7d141375f5462b08848e0ba9e26f6789c2c7c6e09c7",
        ".\\mainWindow.py": "9ca58cf20341f033e33fef67cf25ce8f2ffa83fe3ca58f9c0c7949c320f81ddc",
        ".\\storeEngine.py": "a5082fd7fdf6f7a0b82371bacc0e210c9a2d903f8619c6a78190c602308eb057",
        ".\\tools.py": "5fc12c2a0f63379e2159ae1b8e85d9d44d58250665d3f2309d25285674a1076c",
        ".\\uiSections.py": "7990a03740e61de5920ba907abe232052a8c37cd0e459970ad473f2deb33e46a",
        ".\\upgradeAssistant.py": "ae4dd250376517c72bc8737cb0adfdc79cfa7b6236bea4b06117b15a2aae316d",
        ".\\welcome.py": "74c0bc9532aa28d0220cb34a0e7bce831c05361716a8af22df130d93575b62bf",
        "./components\\gsudo.exe": "1acd324cf636c53012b57467fd7a356520d4199e45acda4a0876cb52c03091a1"
    }
    # END AUTOGENERATED HASH DICTIONARY
    import glob
    import hashlib
    import os
    import sys
    import time

    root_dir = os.path.dirname(__file__)
    os.chdir(root_dir)

    for file in glob.glob("./**/**.py") + glob.glob("./**.py") + glob.glob("./components/**.exe") + glob.glob("./**/**.pyc") + glob.glob("./**.pyc"):
        if file in HASHES.keys():
            with open(file,"rb") as f:
                bytes = f.read() # read entire file as bytes
                HASH = hashlib.sha256(bytes).hexdigest()
                if HASH != HASHES[file]:
                    print(f"ðŸ”´ File {file} HASH does not coincide!")
                    if (getattr(sys, 'frozen', False) and hasattr(sys, '_MEIPASS')):
                        raise ModuleNotFoundError(f"The file {file} has an invalid hash, meaning that it has been likely modified. Please reinstall WingetUI")
        else:
            print(f"File {file} not in hashing list")

    print("Hash check passed, coninuing execution...")


_globals = globals

try:
    try:
        CheckProgramIntegrity()
        import glob
        import hashlib
        import os
        import socket
        import subprocess
        import sys
        import time
        from threading import Thread
        from urllib.request import urlopen

        import globals
        import win32mica
        from apiBackend import runBackendApi
        from customWidgets import *
        from external.blurwindow import ExtendFrameIntoClientArea, GlobalBlur
        from mainWindow import *
        from PySide6.QtCore import *
        from PySide6.QtGui import *
        from PySide6.QtWidgets import *
        from tools import *
        from tools import _


        class MainApplication(QApplication):
            kill = Signal()
            callInMain = Signal(object)
            setLoadBarValue = Signal(str)
            startAnim = Signal(QVariantAnimation)
            changeBarOrientation = Signal()
            showProgram = Signal(str)
            updatesMenu: QMenu = None
            installedMenu: QMenu = None
            running = True
            finishedPreloadingStep: Signal = Signal()
            loadStatus: int = 0

            def __init__(self):
                try:
                    super().__init__(sys.argv)
                    self.isDaemon: bool = "--daemon" in sys.argv
                    self.popup = DraggableWindow()
                    self.popup.FixLag = sys.getwindowsversion().build < 22000
                    self.popup.setFixedSize(QSize(600, 400))
                    self.popup.setWindowFlag(Qt.FramelessWindowHint)
                    self.popup.setLayout(QVBoxLayout())
                    self.popup.layout().addStretch()
                    self.popup.setWindowTitle("WingetUI")
                    titlewidget = QHBoxLayout()
                    titlewidget.addStretch()
                    icon = QLabel()
                    icon.setPixmap(QPixmap(getMedia("icon", autoIconMode = False)).scaledToWidth(128, Qt.TransformationMode.SmoothTransformation))
                    text = QLabel("WingetUI")
                    text.setFixedWidth(0)
                    text.setAlignment(Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignVCenter)
                    text.setStyleSheet(f"font-family: \"Segoe UI Variable Display\";font-weight: bold; color: {'white' if isDark() else 'black'};font-size: 50pt;")
                    titlewidget.addWidget(icon)
                    titlewidget.addWidget(text)
                    titlewidget.addStretch()
                    self.popup.layout().addLayout(titlewidget)
                    self.popup.layout().addStretch()
                    self.loadingText = QLabel(_("Loading WingetUI..."))
                    self.loadingText.setStyleSheet(f"font-family: \"{globals.textfont}\"; color: {'white' if isDark() else 'black'};font-size: 12px;")
                    self.popup.layout().addWidget(self.loadingText)
                    ApplyMenuBlur(self.popup.winId().__int__(), self.popup)

                    skipButton = QPushButton(_("Stuck here? Skip initialization"), self.popup)
                    skipButton.setFlat(True)
                    skipButton.move(280, 350)
                    skipButton.setStyleSheet(f"color: {'white' if isDark() else 'black'}; border-radius: 4px; background-color: rgba({'255, 255, 255, 7%' if isDark() else '0, 0, 0, 7%'}); border: 1px solid rgba({'255, 255, 255, 10%' if isDark() else '0, 0, 0, 10%'})")
                    skipButton.resize(300, 30)
                    skipButton.hide()

                    def forceContinue():
                        self.loadStatus = 1000 # Override loading status

                    skipButton.clicked.connect(forceContinue)


                    self.textEnterAnim = QVariantAnimation(self)
                    self.textEnterAnim.setStartValue(0)
                    self.textEnterAnim.setEndValue(300)
                    self.textEnterAnim.setEasingCurve(QEasingCurve.Type.OutQuart)
                    self.textEnterAnim.valueChanged.connect(lambda v: text.setFixedWidth(v))
                    self.textEnterAnim.setDuration(600)

                    op1 = QGraphicsOpacityEffect()
                    op1.setOpacity(0)
                    self.loadingText.setGraphicsEffect(op1)
                    op2 = QGraphicsOpacityEffect()
                    op2.setOpacity(0)

                    descriptionEnter = QVariantAnimation(self)
                    descriptionEnter.setStartValue(0)
                    descriptionEnter.setEndValue(100)
                    descriptionEnter.setEasingCurve(QEasingCurve.Type.InOutQuad)
                    descriptionEnter.valueChanged.connect(lambda v: (op1.setOpacity(v/100), op2.setOpacity(v/100)))
                    descriptionEnter.setDuration(100)
                    self.textEnterAnim.finished.connect(descriptionEnter.start)


                    self.showAnimation = QPropertyAnimation(self.popup, b"windowOpacity")
                    self.showAnimation.setEasingCurve(QEasingCurve.Type.OutCubic)
                    self.showAnimation.setStartValue(0)
                    self.showAnimation.setEndValue(1)
                    self.showAnimation.setDuration(250)

                    self.loadingProgressBar = QProgressBar(self.popup)
                    self.loadingProgressBar.setGraphicsEffect(op2)
                    self.loadingProgressBar.setStyleSheet(f"""QProgressBar {{border-radius: 2px;height: 4px;border: 0px;background-color: transparent;}}QProgressBar::chunk {{background-color: rgb({'18, 164, 199' if isDark() else '11, 100, 122'});border-radius: 2px;}}""")
                    self.loadingProgressBar.setRange(0, 1000)
                    self.loadingProgressBar.setValue(0)
                    self.loadingProgressBar.setGeometry(QRect(0, 396, 600, 4))
                    self.loadingProgressBar.setFixedHeight(4)
                    self.loadingProgressBar.setTextVisible(False)
                    self.setLoadBarValue.connect(self.loadingProgressBar.setValue)
                    self.startAnim.connect(lambda anim: anim.start())
                    self.changeBarOrientation.connect(lambda: self.loadingProgressBar.setInvertedAppearance(not(self.loadingProgressBar.invertedAppearance())))

                    self.leftSlow = QPropertyAnimation(self.loadingProgressBar, b"value")
                    self.leftSlow.setStartValue(0)
                    self.leftSlow.setEndValue(1000)
                    self.leftSlow.setDuration(700)
                    self.leftSlow.finished.connect(lambda: (self.rightSlow.start(), self.changeBarOrientation.emit()))
                    descriptionEnter.finished.connect(self.leftSlow.start)

                    self.rightSlow = QPropertyAnimation(self.loadingProgressBar, b"value")
                    self.rightSlow.setStartValue(1000)
                    self.rightSlow.setEndValue(0)
                    self.rightSlow.setDuration(700)
                    self.rightSlow.finished.connect(lambda: (self.leftFast.start(), self.changeBarOrientation.emit()))

                    self.leftFast = QPropertyAnimation(self.loadingProgressBar, b"value")
                    self.leftFast.setStartValue(0)
                    self.leftFast.setEndValue(1000)
                    self.leftFast.setDuration(300)
                    self.leftFast.finished.connect(lambda: (self.rightFast.start(), self.changeBarOrientation.emit()))

                    self.rightFast = QPropertyAnimation(self.loadingProgressBar, b"value")
                    self.rightFast.setStartValue(1000)
                    self.rightFast.setEndValue(0)
                    self.rightFast.setDuration(300)
                    self.rightFast.finished.connect(lambda: (self.leftSlow.start(), self.changeBarOrientation.emit()))

                    if not self.isDaemon:
                        self.textEnterAnim.start()
                        self.showAnimation.start()
                        self.popup.show()

                    if not getSettings("AutoDisabledScoopCacheRemoval"):
                        getSettings("EnableScoopCleanup", False)
                        getSettings("AutoDisabledScoopCacheRemoval", True)

                    print("ðŸ”µ Starting main application...")
                    os.chdir(os.path.expanduser("~"))
                    self.kill.connect(lambda: (self.popup.hide(), sys.exit(0)))
                    self.callInMain.connect(lambda f: f())
                    def increaseStep():
                        self.loadStatus += 1
                    self.finishedPreloadingStep.connect(increaseStep)
                    if getSettings("ShownWelcomeWizard") == False or "--welcomewizard" in sys.argv or "--welcome" in sys.argv:
                        self.askAboutPackageManagers(onclose=lambda: (Thread(target=self.loadPreUIComponents, daemon=True).start(), Thread(target=lambda: (time.sleep(15), self.callInMain.emit(skipButton.show)), daemon=True).start()))
                    else:
                        Thread(target=self.loadPreUIComponents, daemon=True).start()
                        Thread(target=lambda: (time.sleep(15), self.callInMain.emit(skipButton.show)), daemon=True).start()
                        self.loadingText.setText(_("Checking for other running instances..."))
                except Exception as e:
                    raise e

            def askAboutPackageManagers(self, onclose: object):
                import welcome
                self.ww = welcome.WelcomeWindow(callback=lambda: (self.popup.show(), onclose()))
                self.popup.hide()
                self.ww.show()

            def loadPreUIComponents(self):
                try:
                    self.loadStatus = 0

                    # Preparation threads
                    Thread(target=self.checkForRunningInstances, daemon=True).start()
                    Thread(target=self.downloadPackagesMetadata, daemon=True).start()
                    if not getSettings("DisableApi"):
                        Thread(target=runBackendApi, args=(self.showProgram,), daemon=True).start()

                    for manager in PackageManagersList:
                        if manager.isEnabled():
                            Thread(target=manager.detectManager, args=(self.finishedPreloadingStep,), daemon=True).start()
                        else:
                            self.loadStatus += 1
                            globals.componentStatus[f"{manager.NAME}Found"] = False
                            globals.componentStatus[f"{manager.NAME}Version"] = _("{0} is disabled").format(manager.NAME)

                    if not getSettings("DisableUpdateIndexes"):
                        for manager in PackageManagersList:
                            if manager.isEnabled():
                                Thread(target=manager.updateSources, args=(self.finishedPreloadingStep,), daemon=True).start()
                            else:
                                self.loadStatus += 1
                    else:
                        self.loadStatus += len(PackageManagersList)

                    Thread(target=self.detectSudo, daemon=True).start()
                    Thread(target=self.removeScoopCache, daemon=True).start()

                    # Daemon threads
                    Thread(target=self.instanceThread, daemon=True).start()
                    Thread(target=self.updateIfPossible, daemon=True).start()

                    while self.loadStatus < 3 + len(PackageManagersList)*2:
                        time.sleep(0.01)
                except Exception as e:
                    print(e)
                finally:
                    self.callInMain.emit(lambda: self.loadingText.setText(_("Loading UI components...")))
                    self.callInMain.emit(lambda: self.loadingProgressBar.setValue(1000))
                    self.callInMain.emit(lambda: self.loadingText.repaint())
                    self.callInMain.emit(lambda: self.loadingProgressBar.repaint())
                    self.callInMain.emit(self.loadMainUI)
                    print(globals.componentStatus)

            def checkForRunningInstances(self):
                print("ðŸ”µ Looking for alive instances...")
                self.nowTime = time.time()
                self.lockFileName = f"WingetUI_{self.nowTime}"
                setSettings(self.lockFileName, True)
                try:
                    timestamps = [float(file.replace(os.path.join(os.path.join(os.path.expanduser("~"), ".wingetui"), "WingetUI_"), "")) for file in glob.glob(os.path.join(os.path.join(os.path.expanduser("~"), ".wingetui"), "WingetUI_*"))] # get a list with the timestamps
                    validTimestamps = [timestamp for timestamp in timestamps if timestamp < self.nowTime]
                    self.callInMain.emit(lambda: self.loadingText.setText(_("Checking found instace(s)...")))
                    print("ðŸŸ¡ Found lock file(s), reactivating...")
                    for tst in validTimestamps:
                        setSettings("RaiseWindow_"+str(tst), True)
                    if validTimestamps != [] and timestamps != [self.nowTime]:
                        for i in range(16):
                            time.sleep(0.1)
                            self.callInMain.emit(lambda: self.loadingText.setText(_("Sent handshake. Waiting for instance listener's answer... ({0}%)").format(int(i/15*100))))
                            for tst in validTimestamps:
                                if not getSettings("RaiseWindow_"+str(tst), cache = False):
                                    print(f"ðŸŸ¡ Instance {tst} responded, quitting...")
                                    self.callInMain.emit(lambda: self.loadingText.setText(_("Instance {0} responded, quitting...").format(tst)))
                                    setSettings(self.lockFileName, False)
                                    while self.textEnterAnim.state() == QAbstractAnimation.State.Running:
                                        time.sleep(0.1)
                                    self.kill.emit()
                                    sys.exit(0)
                        self.callInMain.emit(lambda: self.loadingText.setText(_("Starting daemons...")))
                        print("ðŸ”µ Reactivation signal ignored: RaiseWindow_"+str(validTimestamps))
                        for tst in validTimestamps:
                            setSettings("RaiseWindow_"+str(tst), False)
                            setSettings("WingetUI_"+str(tst), False)
                except Exception as e:
                    print(e)
                self.loadStatus += 1

            def removeScoopCache(self):
                try:
                    if getSettings("EnableScoopCleanup"):
                        self.callInMain.emit(lambda: self.loadingText.setText(_("Clearing Scoop cache...")))
                        p = subprocess.Popen(f"{Scoop.EXECUTABLE} cache rm *", shell=True, stdout=subprocess.PIPE)
                        p2 = subprocess.Popen(f"{Scoop.EXECUTABLE} cleanup --all --cache", shell=True, stdout=subprocess.PIPE)
                        p3 = subprocess.Popen(f"{Scoop.EXECUTABLE} cleanup --all --global --cache", shell=True, stdout=subprocess.PIPE)
                        p.wait()
                        p2.wait()
                        p3.wait()
                except Exception as e:
                    report(e)

            def detectSudo(self):
                global GSUDO_EXE_LOCATION
                try:
                    self.callInMain.emit(lambda: self.loadingText.setText(_("Locating {pm}...").format(pm = "sudo")))
                    o = subprocess.run(f"{GSUDO_EXECUTABLE} -v", shell=True, stdout=subprocess.PIPE)
                    globals.componentStatus["sudoFound"] = shutil.which(GSUDO_EXECUTABLE) != None
                    globals.componentStatus["sudoVersion"] = o.stdout.decode('utf-8').split("\n")[0]
                    self.callInMain.emit(lambda: self.loadingText.setText(_("{pm} found: {state}").format(pm = "Sudo", state = _("Yes") if globals.componentStatus['sudoFound'] else _("No"))))
                except Exception as e:
                    print(e)
                self.loadStatus += 1

            def downloadPackagesMetadata(self):
                try:
                    self.callInMain.emit(lambda: self.loadingText.setText(_("Downloading package metadata...")))
                    url = "https://raw.githubusercontent.com/marticliment/WingetUI/main/WebBasedData/screenshot-database-v2.json"
                    if getSettings("IconDataBaseURL"):
                        url = getSettingsValue("iconDataBaseURL")
                    data = urlopen(url).read()
                    try:
                        os.makedirs(os.path.join(os.path.expanduser("~"), f".wingetui/cachedmeta"))
                    except FileExistsError:
                        pass
                    with open(os.path.join(os.path.expanduser("~"), f".wingetui/cachedmeta/packages.json"), "wb") as f:
                        f.write(data)
                    print("ðŸŸ¢ Downloaded latest metadata to local file")
                except Exception as e:
                    report(e)
                try:
                    with open(os.path.join(os.path.expanduser("~"), f".wingetui/cachedmeta/packages.json"), "rb") as f:
                        globals.packageMeta = json.load(f)
                    print("ðŸ”µ Loaded metadata from local file")
                except Exception as e:
                    report(e)
                self.loadStatus += 1

            def loadMainUI(self):
                print("ðŸ”µ Reached main ui load milestone")
                try:
                    globals.trayIcon = QSystemTrayIcon()
                    self.trayIcon = globals.trayIcon
                    update_tray_icon()
                    globals.app = self
                    self.trayIcon.setToolTip(_("Initializing WingetUI..."))
                    self.trayIcon.setVisible(True)

                    menu = QMenu("WingetUI")
                    globals.trayMenu = menu
                    self.trayIcon.setContextMenu(menu)
                    self.discoverPackages = QAction(_("Discover Packages"), menu)
                    menu.addAction(self.discoverPackages)
                    menu.addSeparator()

                    self.updatePackages = QAction(_("Software Updates"), menu)
                    globals.updatesAction = self.updatePackages
                    menu.addAction(self.updatePackages)

                    self.updatesMenu = menu.addMenu(_("0 updates found"))
                    self.updatesMenu.menuAction().setIcon(QIcon(getMedia("list")))
                    self.updatesMenu.setParent(menu)
                    globals.trayMenuUpdatesList = self.updatesMenu
                    menu.addMenu(self.updatesMenu)

                    globals.updatesHeader = QAction(f"{_('App Name')}  \t{_('Installed Version')} \t â†’ \t {_('New version')}", menu)
                    globals.updatesHeader.setEnabled(False)
                    globals.updatesHeader.setIcon(QIcon(getMedia("version")))
                    self.updatesMenu.addAction(globals.updatesHeader)

                    self.uaAction = QAction(_("Update all"), menu)
                    self.uaAction.setIcon(QIcon(getMedia("menu_installall")))
                    menu.addAction(self.uaAction)
                    menu.addSeparator()

                    self.uninstallPackages = QAction(_("Installed Packages"),menu)
                    menu.addAction(self.uninstallPackages)

                    self.installedMenu = menu.addMenu(_("0 packages found"))
                    self.installedMenu.menuAction().setIcon(QIcon(getMedia("list")))
                    self.installedMenu.setParent(menu)
                    globals.trayMenuInstalledList = self.installedMenu
                    menu.addMenu(self.installedMenu)
                    menu.addSeparator()

                    globals.installedHeader = QAction(f"{_('App Name')}\t{_('Installed Version')}", menu)
                    globals.installedHeader.setIcon(QIcon(getMedia("version")))
                    globals.installedHeader.setEnabled(False)
                    self.installedMenu.addAction(globals.installedHeader)

                    self.infoAction = QAction(_("About WingetUI version {0}").format(versionName), menu)
                    self.infoAction.setIcon(QIcon(getMedia("info")))
                    menu.addAction(self.infoAction)
                    self.showAction = QAction(_("Show WingetUI"), menu)
                    self.showAction.setIcon(QIcon(getMedia("icon")))
                    menu.addAction(self.showAction)
                    menu.addSeparator()

                    self.settings = QAction(_("WingetUI Settings"), menu)
                    menu.addAction(self.settings)


                    self.quitAction = QAction(menu)
                    self.quitAction.setIcon(QIcon(getMedia("menu_close")))
                    self.quitAction.setText(_("Quit"))
                    self.quitAction.triggered.connect(lambda: self.quit())
                    menu.addAction(self.quitAction)

                    self.updatePackages.setIcon(QIcon(getMedia("alert_laptop")))
                    self.discoverPackages.setIcon(QIcon(getMedia("desktop_download")))
                    self.settings.setIcon(QIcon(getMedia("settings_gear")))
                    self.uninstallPackages.setIcon(QIcon(getMedia("workstation")))

                    def showWindow():
                        # This function will be defined when the mainWindow gets defined
                        pass

                    def showMenu():
                        pos = QCursor.pos()
                        s = self.screenAt(pos)
                        if isW11 and (pos.y()+48) > (s.geometry().y() + s.geometry().height()):
                                menu.move(pos)
                                menu.show()
                                sy = s.geometry().y()+s.geometry().height()
                                sx = s.geometry().x()+s.geometry().width()
                                pos.setY(sy-menu.height()-54) # Show the context menu a little bit over the taskbar
                                pos.setX(sx-menu.width()-6 if sx-menu.width()-6 < pos.x() else pos.x()) # Show the context menu a little bit over the taskbar
                                menu.move(pos)
                        else:
                            menu.exec(pos)
                    self.trayIcon.activated.connect(lambda r: (applyMenuStyle(), showMenu()) if r == QSystemTrayIcon.Context else showWindow())

                    self.trayIcon.messageClicked.connect(lambda: showWindow())
                    self.installedMenu.aboutToShow.connect(lambda: applyMenuStyle())
                    self.updatesMenu.aboutToShow.connect(lambda: applyMenuStyle())

                    def applyMenuStyle():
                        for mn in (menu, self.updatesMenu, self.installedMenu):
                            mn.setObjectName("MenuMenuMenu")
                            if not isDark():
                                ss = f'#{mn.objectName()}{{background-color: {"rgba(220, 220, 220, 1%)" if isW11 else "rgba(255, 255, 255, 30%);border-radius: 0px;" };}}'
                            else:
                                ss = f'#{mn.objectName()}{{background-color: {"rgba(220, 220, 220, 1%)" if isW11 else "rgba(20, 20, 20, 25%);border-radius: 0px;"};}}'
                            if isDark():
                                ExtendFrameIntoClientArea(mn.winId().__int__())
                                mn.setStyleSheet(menuDarkCSS+ss)
                                GlobalBlur(mn.winId().__int__(), Acrylic=True, hexColor="#21212140", Dark=True)
                            else:
                                ExtendFrameIntoClientArea(mn.winId().__int__())
                                mn.setStyleSheet(menuLightCSS+ss)
                                GlobalBlur(mn.winId().__int__(), Acrylic=True, hexColor="#eeeeee40", Dark=False)

                    self.setStyle("winvowsvista")
                    globals.darkCSS = darkCSS.replace("Segoe UI Variable Text", globals.textfont).replace("Segoe UI Variable Display", globals.dispfont).replace("Segoe UI Variable Display Semib", globals.dispfontsemib)
                    globals.lightCSS = lightCSS.replace("Segoe UI Variable Text", globals.textfont).replace("Segoe UI Variable Display", globals.dispfont).replace("Segoe UI Variable Display Semib", globals.dispfontsemib)
                    self.window = RootWindow()
                    self.showProgram.connect(lambda id: (self.discoverPackages.trigger(), globals.discover.loadShared(id)))
                    self.discoverPackages.triggered.connect(lambda: self.window.showWindow(0))
                    self.updatePackages.triggered.connect(lambda: self.window.showWindow(1))
                    self.uninstallPackages.triggered.connect(lambda: self.window.showWindow(2))
                    self.infoAction.triggered.connect(lambda: self.window.showWindow(4))
                    self.settings.triggered.connect(lambda: self.window.showWindow(3))
                    globals.mainWindow = self.window
                    self.showAction.triggered.connect(lambda: self.window.showWindow())
                    self.uaAction.triggered.connect(self.window.updates.upgradeAllAction.trigger)
                    showWindow = self.showAction.trigger
                    self.loadingText.setText(_("Latest details..."))
                    if not self.isDaemon:
                        self.window.show()
                        self.popup.close()
                        if(self.window.isAdmin()):
                            if not getSettings("AlreadyWarnedAboutAdmin"):
                                self.window.warnAboutAdmin()
                                setSettings("AlreadyWarnedAboutAdmin", True)

                except Exception as e:
                    import platform
                    import traceback
                    import webbrowser
                    try:
                        from tools import version as appversion
                    except Exception as e:
                        appversion = "Unknown"
                    os_info = f"" + \
                        f"                        OS: {platform.system()}\n"+\
                        f"                   Version: {platform.win32_ver()}\n"+\
                        f"           OS Architecture: {platform.machine()}\n"+\
                        f"          APP Architecture: {platform.architecture()[0]}\n"+\
                        f"                  Language: {langName}\n"+\
                        f"               APP Version: {appversion}\n"+\
                        f"                   Program: WingetUI\n"+\
                        f"           Program section: UI Loading"+\
                        "\n\n-----------------------------------------------------------------------------------------"
                    traceback_info = "Traceback (most recent call last):\n"
                    try:
                        for line in traceback.extract_tb(e.__traceback__).format():
                            traceback_info += line
                        traceback_info += f"\n{type(e).__name__}: {str(e)}"
                    except:
                        traceback_info += "\nUnable to get traceback"
                    traceback_info += str(type(e))
                    traceback_info += ": "
                    traceback_info += str(e)
                    webbrowser.open(("https://www.marticliment.com/error-report/?appName=WingetUI&errorBody="+os_info.replace('\n', '{l}').replace(' ', '{s}')+"{l}{l}{l}{l}WingetUI Log:{l}"+str("\n\n\n\n"+traceback_info).replace('\n', '{l}').replace(' ', '{s}')).replace("#", "|=|"))
                    print(traceback_info)
                    self.popup.hide()

            def reloadWindow(self):
                cprint("Reloading...")
                self.infoAction.setIcon(QIcon(getMedia("info")))
                self.updatesMenu.menuAction().setIcon(QIcon(getMedia("list")))
                globals.updatesHeader.setIcon(QIcon(getMedia("version")))
                self.uaAction.setIcon(QIcon(getMedia("menu_installall")))
                self.iAction.setIcon(QIcon(getMedia("menu_uninstall")))
                self.installedMenu.menuAction().setIcon(QIcon(getMedia("list")))
                globals.installedHeader.setIcon(QIcon(getMedia("version")))
                self.quitAction.setIcon(QIcon(getMedia("menu_close")))
                self.showAction.setIcon(QIcon(getMedia("menu_show")))
                globals.themeChanged = True
                globals.mainWindow.setAttribute(Qt.WA_DeleteOnClose, True)
                globals.mainWindow.close()
                globals.mainWindow.deleteLater()
                self.window = RootWindow()
                globals.mainWindow = self.window
                self.showAction.triggered.disconnect()
                self.showAction.triggered.connect(self.window.showWindow)

            def instanceThread(self):
                while True:
                    try:
                        for file in glob.glob(os.path.join(os.path.join(os.path.expanduser("~"), ".wingetui"), "RaiseWindow_*")):
                            if getSettings("RaiseWindow_"+str(self.nowTime), cache = False):
                                print("ðŸŸ¢ Found reactivation lock file...")
                                setSettings("RaiseWindow_"+str(self.nowTime), False)
                                if not self.window.isMaximized():
                                    self.callInMain.emit(self.window.hide)
                                    self.callInMain.emit(self.window.showMinimized)
                                    self.callInMain.emit(self.window.show)
                                    self.callInMain.emit(self.window.showNormal)
                                else:
                                    self.callInMain.emit(self.window.hide)
                                    self.callInMain.emit(self.window.showMinimized)
                                    self.callInMain.emit(self.window.show)
                                    self.callInMain.emit(self.window.showMaximized)
                                self.callInMain.emit(self.window.setFocus)
                                self.callInMain.emit(self.window.raise_)
                                self.callInMain.emit(self.window.activateWindow)
                    except Exception as e:
                        print(e)
                    time.sleep(0.5)

            def updateIfPossible(self):
                if not getSettings("DisableAutoUpdateWingetUI"):
                    print("ðŸ”µ Starting update check")
                    response = urlopen("https://raw.githubusercontent.com/icarus-consulting/WingetUI/main/WebBasedData/wingetui.ver")
                    print("ðŸ”µ Version URL:", response.url)
                    response = response.read().decode("utf8")
                    new_version_number = response.split("///")[0]
                    provided_hash = response.split("///")[1].replace("\n", "").lower()
                    if float(new_version_number) > version:
                        print("ðŸŸ¢ Updates found!")
                        url = "https://github.com/icarus-consulting/WingetUI/releases/latest/download/WingetUI.Installer.exe"
                        filedata = urlopen(url)
                        datatowrite = filedata.read()
                        filename = ""
                        downloadPath = os.environ["temp"] if "temp" in os.environ.keys() else os.path.expanduser("~")
                        with open(os.path.join(downloadPath, "wingetui-updater.exe"), 'wb') as f:
                            f.write(datatowrite)
                            filename = f.name
                        if(hashlib.sha256(datatowrite).hexdigest().lower() == provided_hash):
                            print("ðŸ”µ Hash: ", provided_hash)
                            print("ðŸŸ¢ Hash ok, starting update")
                            globals.updatesAvailable = True
                            while globals.mainWindow == None:
                                time.sleep(1)
                            globals.canUpdate = not globals.mainWindow.isVisible()
                            while not globals.canUpdate:
                                time.sleep(0.1)
                            if not getSettings("DisableAutoUpdateWingetUI"):
                                subprocess.run(f'start /B "" "{filename}" /silent', shell=True)
                        else:
                            print("ðŸŸ  Hash not ok")
                            print("ðŸŸ  File hash: ", hashlib.sha256(datatowrite).hexdigest())
                            print("ðŸŸ  Provided hash: ", provided_hash)
                    else:
                        print("ðŸŸ¢ Updates not found")

        colors = getColors()
        isW11 = False
        try:
            import platform
            if int(platform.version().split('.')[2]) >= 22000:
                isW11 = True
        except Exception as e:
            report(e)

        darkCSS = f"""
        * {{
            background-color: transparent;
            color: #eeeeee;
            font-family: "Segoe UI Variable Text";
            outline: none;
        }}
        #InWindowNotification {{
            background-color: #181818;
            border-radius: 16px;
            height: 32px;
            border: 1px solid #101010;
        }}
        *::disabled {{
            color: gray;
        }}
        QInputDialog {{
            background-color: #202020;
        }}
        #micawin {{
            background-color: mainbg;
        }}
        QMenu {{
            padding: 2px;
            color: white;
            background: transparent;
            border-radius: 8px;
        }}
        QMenu::separator {{
            margin: 2px;
            height: 1px;
            background: rgb(60, 60, 60);
        }}
        QMenu::icon{{
            padding-left: 10px;
        }}
        QMenu::item{{
            height: 30px;
            border: none;
            background: transparent;
            padding-right: 10px;
            padding-left: 10px;
            border-radius: 4px;
            margin: 2px;
        }}
        QMenu::item:disabled{{
            background: transparent;
            height: 30px;
            color: grey;
            border: none;
            padding-right: 10px;
            padding-left: 10px;
            border-radius: 4px;
        }}
        QMenu::item:selected{{
            background: rgba(255, 255, 255, 10%);
            height: 30px;
            border: none;
            padding-right: 10px;
            padding-left: 10px;
            border-radius: 4px;
        }}
        QMenu::item:selected:disabled{{
            background: transparent;
            height: 30px;
            border: none;
            padding-right: 10px;
            padding-left: 10px;
            border-radius: 4px;
        }}
        QMessageBox{{
            background-color: #202020;
        }}
        #greyLabel {{
            color: #bbbbbb;
        }}
        QPushButton,#FocusLabel {{
            width: 150px;
            background-color:rgba(81, 81, 81, 25%);
            border-radius: 6px;
            border: 1px solid rgba(86, 86, 86, 25%);
            height: 25px;
            font-size: 9pt;
            border-top: 1px solid rgba(99, 99, 99, 25%);
            margin: 0px;
            font-family: "Segoe UI Variable Display Semib";
        }}
        #FlatButton {{
            width: 150px;
            background-color: rgba(255, 255, 255, 1%);
            border-radius: 6px;
            border: 0px solid rgba(255, 255, 255, 1%);
            height: 25px;
            font-size: 9pt;
            border-top: 0px solid rgba(255, 255, 255, 1%);
        }}
        QPushButton:hover {{
            background-color:rgba(86, 86, 86, 25%);
            border-radius: 6px;
            border: 1px solid rgba(100, 100, 100, 25%);
            height: 30px;
            border-top: 1px solid rgba(107, 107, 107, 25%);
        }}
        #Headerbutton {{
            width: 150px;
            background-color:rgba(0, 0, 0, 1%);
            border-radius: 6px;
            border: 0px solid transparent;
            height: 25px;
            font-size: 9pt;
            margin: 0px;
            font-family: "Segoe UI Variable Display Semib";
            font-size: 9pt;
        }}
        #Headerbutton:hover {{
            background-color:rgba(100, 100, 100, 12%);
            border-radius: 8px;
            height: 30px;
        }}
        #Headerbutton:checked {{
            background-color:rgba(100, 100, 100, 25%);
            border-radius: 8px;
            border: 0px solid rgba(100, 100, 100, 25%);
            height: 30px;
        }}
        #package {{
            background-color:rgba(100, 100, 100, 6%);
            border-radius: 8px;
            border: 0px solid rgba(100, 100, 100, 25%);
            height: 30px;
        }}
        #PackageButton {{
            width: 150px;
            background-color:rgba(81, 81, 81, 15%);
            border-radius: 6px;
            border: 0px solid rgba(86, 86, 86, 25%);
            height: 25px;
            font-size: 9pt;
            margin: 0px;
            font-family: "Segoe UI Variable Display Semib";
        }}
        #PackageButton:hover {{
            background-color:rgba(86, 86, 86, 25%);
            border-radius: 6px;
            border: 0px solid rgba(100, 100, 100, 25%);
            height: 30px;
        }}
        #buttonier {{
            border: 0px solid rgba(100, 100, 100, 25%);
            border-radius: 12px;
        }}
        #AccentButton{{
            color: #202020;
            font-size: 9pt;
            font-family: "Segoe UI Variable Display Semib";
            background-color: rgb({colors[1]});
            border-color: rgb({colors[1]});
            border-bottom-color: rgb({colors[2]});
        }}
        #AccentButton:hover{{
            background-color: rgba({colors[1]}, 80%);
            border-color: rgb({colors[2]});
            border-bottom-color: rgb({colors[2]});
        }}
        #AccentButton:pressed{{
            color: #555555;
            background-color: rgba({colors[1]}, 80%);
            border-color: rgb({colors[2]});
            border-bottom-color: rgb({colors[2]});
        }}
        #AccentButton:disabled{{
            color: grey;
            background-color: rgba(50,50,50, 80%);
            border-color: rgb(50, 50, 50);
            border-bottom-color: rgb(50, 50, 50);
        }}
        QLineEdit {{
            background-color: rgba(81, 81, 81, 25%);
            font-family: "Segoe UI Variable Text";
            font-size: 9pt;
            width: 300px;
            padding: 5px;
            border-radius: 6px;
            border: 0.6px solid rgba(86, 86, 86, 25%);
            border-bottom: 2px solid rgb({colors[4]});
            selection-background-color: rgb({colors[2]});
        }}
        QLineEdit:disabled {{
            background-color: rgba(81, 81, 81, 25%);
            font-family: "Segoe UI Variable Text";
            font-size: 9pt;
            width: 300px;
            padding: 5px;
            border-radius: 6px;
            border: 0.6px solid rgba(86, 86, 86, 25%);
        }}
        QLabel{{
            selection-background-color: rgb({colors[2]});
        }}
        QScrollBar {{
            background: transparent;
            margin: 4px;
            margin-left: 0;
            width: 16px;
            height: 20px;
            border: none;
            border-radius: 5px;
        }}
        QScrollBar:horizontal {{
            margin-bottom: 0;
            padding-bottom: 0;
            height: 12px;
        }}
        QScrollBar::handle {{
            margin: 3px;
            min-height: 20px;
            min-width: 20px;
            border-radius: 3px;
            background: rgba(80, 80, 80, 40%);
        }}
        QScrollBar::handle:hover {{
            margin: 3px;
            border-radius: 3px;
            background: rgba(112, 112, 112, 35%);
        }}
        QScrollBar::add-line {{
            height: 0;
            width: 0;
            subcontrol-position: bottom;
            subcontrol-origin: margin;
        }}
        QScrollBar::sub-line {{
            height: 0;
            width: 0;
            subcontrol-position: top;
            subcontrol-origin: margin;
        }}
        QScrollBar::up-arrow, QScrollBar::down-arrow {{
            background: none;
        }}
        QScrollBar::add-page, QScrollBar::sub-page {{
            background: none;
        }}
        QHeaderView,QAbstractItemView {{
            background-color: #55303030;
            border-radius: 6px;
            border: none;
            padding: 1px;
            height: 25px;
            border: 1px solid #1f1f1f;
            margin-bottom: 5px;
            margin-left: 0px;
            margin-right: 0px;
        }}
        QHeaderView {{
            padding-right: 0px;
        }}
        QHeaderView::section {{
            background-color: transparent;
            border-radius: 6px;
            padding: 4px;
            height: 25px;
            margin: 1px;
        }}
        QHeaderView::section:first {{
            background-color: transparent;
            border-radius: 6px;
            padding: 4px;
            height: 25px;
            margin: 1px;
            margin-left: 0px;
            padding-left: 10px;
        }}
        QTreeWidget {{
            show-decoration-selected: 0;
            background-color: transparent;
            padding: 0px;
            margin: 0px;
            border-radius: 6px;
            border: 0px solid #1f1f1f;
        }}
        QTreeWidget::item {{
            margin-top: 3px;
            margin-bottom: 3px;
            padding-top: 3px;
            padding-bottom: 3px;
            background-color: rgba(48, 48, 48, 20%);
            height: 25px;
            border-bottom: 1px solid #1f1f1f;
            border-top: 1px solid #1f1f1f;
        }}
        QTreeWidget::item:selected {{
            margin-top: 2px;
            margin-bottom: 2px;
            padding: 0px;
            padding-top: 3px;
            padding-bottom: 3px;
            background-color: rgba(48, 48, 48, 35%);
            height: 25px;
            border-bottom: 1px solid #303030;
            border-top: 1px solid #303030;
            color: rgb({colors[2]});
        }}
        QTreeWidget::item:hover {{
            margin-top: 2px;
            margin-bottom: 2px;
            padding: 0px;
            padding-top: 3px;
            padding-bottom: 3px;
            background-color: rgba(48, 48, 48, 45%);
            height: 25px;
            border-bottom: 1px solid #303030;
            border-top: 1px solid #303030;
        }}
        QTreeWidget::item:first {{
            border-top-left-radius: 6px;
            border-bottom-left-radius: 6px;
            border-left: 1px solid #1f1f1f;
            margin-left: 0px;
            padding-left: 0px;
        }}
        QTreeWidget::item:last {{
            border-top-right-radius: 6px;
            border-bottom-right-radius: 6px;
            border-right: 1px solid #1f1f1f;
            padding-right: 0px;
            margin-right: 0px;
        }}
        QTreeWidget::item:first:selected {{
            border-left: 1px solid #303030;
        }}
        QTreeWidget::item:last:selected {{
            border-right: 1px solid #303030;
        }}
        QTreeWidget::item:first:hover {{
            border-left: 1px solid #303030;
        }}
        QTreeWidget::item:last:hover {{
            border-right: 1px solid #303030;
        }}
        QProgressBar {{
            border-radius: 2px;
            height: 4px;
            border: 0px;
        }}
        QProgressBar::chunk {{
            background-color: rgb({colors[2]});
            border-radius: 2px;
        }}
        QCheckBox::indicator{{
            height: 16px;
            width: 16px;
        }}
        QTreeView::indicator{{
            height:18px;
            width: 18px;
            margin: 0px;
            margin-left: 4px;
            margin-top: 2px;
        }}
        QTreeView::indicator:unchecked,QCheckBox::indicator:unchecked {{
            background-color: rgba(30, 30, 30, 25%);
            border: 1px solid #444444;
            border-radius: 4px;
        }}
        QTreeView::indicator:disabled,QCheckBox::indicator:disabled {{
            background-color: rgba(30, 30, 30, 5%);
            color: #dddddd;
            border: 1px solid rgba(255, 255, 255, 5%);
            border-radius: 4px;
        }}
        QTreeView::indicator:unchecked:hover,QCheckBox::indicator:unchecked:hover {{
            background-color: #2a2a2a;
            border: 1px solid #444444;
            border-radius: 4px;
        }}
        QTreeView::indicator:checked,QCheckBox::indicator:checked {{
            border: 1px solid #444444;
            background-color: rgba({colors[1]}, 80%);
            border-radius: 4px;
            image: url("{getMedia("tick")}");
        }}
        QTreeView::indicator:disabled,QCheckBox::indicator:checked:disabled {{
            border: 1px solid #444444;
            background-color: #303030;
            color: #dddddd;
            border-radius:4px;
        }}
        QTreeView::indicator:checked:hover,QCheckBox::indicator:checked:hover {{
            border: 1px solid #444444;
            background-color: rgb({colors[2]});
            border-radius: 4px;
        }}
        QComboBox {{
            width: 200px;
            background-color:rgba(81, 81, 81, 10%);
            border-radius: 6px;
            border: 1px solid rgba(86, 86, 86, 10%);
            height: 30px;
            border-top: 1px solid rgba(99, 99, 99, 10%);
            padding-left: 10px;
            padding-right: 10px;
        }}
        QComboBox:hover {{
            background-color:rgba(86, 86, 86, 20%);
            border-radius: 6px;
            border: 1px solid rgba(100, 100, 100, 15%);
            height: 30px;
            border-top: 1px solid rgba(107, 107, 107, 15%);
        }}
        QComboBox::drop-down {{
            subcontrol-origin: padding;
            subcontrol-position: top right;
            background-color: none;
            padding: 5px;
            border-radius: 6px;
            border: none;
            width: 30px;
        }}
        QComboBox::down-arrow {{
            image: url("{getMedia("drop-down")}");
            height: 8px;
            width: 8px;
        }}
        QComboBox::down-arrow:disabled {{
            image: url("{getMedia("drop-down")}");
            height: 8px;
            width: 8px;
        }}
        QComboBox QAbstractItemView {{
            padding: 4px;
            margin: 0px;
            border-radius: 8px;
        }}
        QComboBox#transparent QAbstractItemView {{
            border: 1px solid transparent;
            background-color: transparent;
        }}
        QComboBox QAbstractItemView::item{{
            height: 30px;
            border: none;
            padding-left: 10px;
            border-radius: 4px;
        }}
        QComboBox QAbstractItemView::item:selected{{
            background: rgba(255, 255, 255, 6%);
            height: 30px;
            border: none;
            padding-left: 10px;
            border-radius: 4px;
        }}
        QListWidget{{
            border: 0px;
            background-color: transparent;
            color: transparent;
        }}
        QListWidget::item{{
            border: 0px;
            background-color: transparent;
            color: transparent;
        }}
        QPlainTextEdit{{
            border: 1px solid #1b1b1b;
            border-radius: 6px;
            padding: 6px;
            color: white;
            background-color: #212121;
            font-family: "Consolas";
        }}
        QToolTip {{
            background-color: #262626;
            border: 1px solid #202020;
            border-radius: 6px;
            padding: 4px;
            border-radius: 0px;
        }}
        QToolButton {{
            background-color:rgba(0, 0, 0, 1%);
            border-radius: 4px;
            border: 0px solid transparent;
            margin: 5px;
            margin-right: 0px;
            font-size: 9pt;
            font-family: "Segoe UI Variable Text";
            font-size: 9pt;
            padding: 4px;
            outline: 2px solid white;
            outline-offset: -3px;
            outline-radius: 8px;
        }}
        QToolButton:hover {{
            background-color:rgba(100, 100, 100, 12%);
            border-radius: 4px;
            margin: 5px;
            margin-right: 0px;
            padding: 4px;
        }}
        QToolBar:separator {{
            width: 1px;
            margin: 5px;
            margin-right: 0px;
            background-color: rgba(255, 255, 255, 10%);
        }}
        #greyishLabel {{
            color: #aaaaaa;
        }}
        #subtitleLabelHover {{
            background-color: rgba(20, 20, 20, 0.01);
            margin: 10px;
            margin-top: 0;
            margin-bottom: 0;
            border-radius: 4px;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
            border: 1px solid transparent;
        }}
        #subtitleLabelHover:hover{{
            background-color: rgba(255, 255, 255, 3%);
            margin: 10px;
            margin-top: 0;
            margin-bottom: 0;
            padding-left: {(20)}px;
            padding-top: 0;
            padding-bottom: 0;
            border: 1px solid rgba(255, 255, 255, 7%);
            font-size: 13pt;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
        }}
        #subtitleLabelHover:pressed{{
            background-color: rgba(0, 0, 0, 12%);
            margin: 10px;
            margin-top: 0;
            margin-bottom: 0;
            padding-left: {(20)}px;
            padding-top: 0;
            padding-bottom: 0;
            border: 1px solid rgba(255, 255, 255, 7%);
            font-size: 13pt;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
        }}
        #micaRegularBackground {{
            border: 0 solid transparent;
            margin: 1px;
            background-color: rgba(255, 255, 255, 5%);
            border-radius: 8px;
        }}
        #subtitleLabel{{
            margin: 10px;
            margin-bottom: 0;
            margin-top: 0;
            padding-left: {(20)}px;
            padding-top: {(15)}px;
            padding-bottom: {(15)}px;
            border: 1px solid rgba(25, 25, 25, 50%);
            font-size: 13pt;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
        }}
        #StLbl{{
            padding: 0;
            background-color: rgba(71, 71, 71, 0%);
            margin: 0;
            border:none;
            font-size: {(11)}px;
        }}
        #stBtn{{
            background-color: rgba(255, 255, 255, 5%);
            margin: 10px;
            margin-bottom: 0;
            margin-top: 0;
            border: 1px solid rgba(25, 25, 25, 50%);
            border-bottom-left-radius: 8px;
            border-bottom-right-radius: 8px;
        }}
        #lastWidget{{
            border-bottom-left-radius: 4px;
            border-bottom-right-radius: 4px;
        }}
        #stChkBg{{
            padding: {(15)}px;
            padding-left: {(45)}px;
            background-color: rgba(255, 255, 255, 5%);
            margin: 10px;
            margin-bottom: 0;
            margin-top: 0;
            border: 1px solid rgba(25, 25, 25, 50%);
            border-bottom: 0;
        }}
        #stChk::indicator{{
            height: {(20)}px;
            width: {(20)}px;
        }}
        #stChk::indicator:unchecked {{
            background-color: rgba(30, 30, 30, 25%);
            border: 1px solid #444444;
            border-radius: 6px;
        }}
        #stChk::indicator:disabled {{
            background-color: rgba(71, 71, 71, 0%);
            color: #bbbbbb;
            border: 1px solid #444444;
            border-radius: 6px;
        }}
        #stChk::indicator:unchecked:hover {{
            background-color: #2a2a2a;
            border: 1px solid #444444;
            border-radius: 6px;
        }}
        #stChk::indicator:checked {{
            border: 1px solid #444444;
            background-color: rgb({colors[1]});
            border-radius: 6px;
            image: url("{getPath("tick_white.png")}");
        }}
        #stChk::indicator:checked:disabled {{
            border: 1px solid #444444;
            background-color: #303030;
            color: #bbbbbb;
            border-radius: 6px;
            image: url("{getPath("tick_black.png")}");
        }}
        #stChk::indicator:checked:hover {{
            border: 1px solid #444444;
            background-color: rgb({colors[2]});
            border-radius: 6px;
            image: url("{getPath("tick_white.png")}");
        }}
        #stCmbbx {{
            width: {(100)}px;
            background-color:rgba(81, 81, 81, 25%);
            border-radius: 8px;
            border: 1px solidrgba(86, 86, 86, 25%);
            height: {(25)}px;
            padding-left: 10px;
            border-top: 1px solidrgba(99, 99, 99, 25%);
        }}
        #stCmbbx:disabled {{
            width: {(100)}px;
            background-color: #303030;
            color: #bbbbbb;
            border-radius: 8px;
            border: 0.6px solid #262626;
            height: {(25)}px;
            padding-left: 10px;
        }}
        #stCmbbx:hover {{
            background-color:rgba(86, 86, 86, 25%);
            border-radius: 8px;
            border: 1px solidrgba(100, 100, 100, 25%);
            height: {(25)}px;
            padding-left: 10px;
            border-top: 1px solid rgba(107, 107, 107, 25%);
        }}
        #stCmbbx::drop-down {{
            subcontrol-origin: padding;
            subcontrol-position: top right;
            padding: 5px;
            border-radius: 8px;
            border: none;
            width: 30px;
        }}
        #stCmbbx QAbstractItemView {{
            border: 1px solid rgba(36, 36, 36, 50%);
            padding: 4px;
            padding-right: 0;
            background-color: #303030;
            border-radius: 8px;
        }}
        #stCmbbx QAbstractItemView::item{{
            height: 30px;
            border: none;
            padding-left: 10px;
            border-radius: 4px;
        }}
        #stCmbbx QAbstractItemView::item:selected{{
            background: rgba(255, 255, 255, 6%);
            height: 30px;
            border: none;
            padding-left: 10px;
            border-radius: 4px;
        }}
        #DraggableVerticalSection {{
            background-color: rgba(255, 255, 255, 13%);
            border-radius: 2px;
            margin: 5px;
            margin-bottom: 0px;
        }}
        #DraggableVerticalSection:hover {{
            background-color: rgba(255, 255, 255, 17%);
        }}
        """

        menuDarkCSS = f"""
        * {{
            border-radius: 8px;
            background-color: transparent;
        }}
        QWidget{{
            background-color: transparent;
            border-radius: 8px;
            menu-scrollable: 1;
        }}
        QMenu {{
            padding: 2px;
            outline: 0px;
            color: white;
            font-family: "Segoe UI Variable Text";
            border-radius: 8px;
        }}
        QMenu::separator {{
            margin: 2px;
            height: 1px;
            background: rgb(60, 60, 60);
        }}
        QMenu::icon{{
            padding-left: 10px;
        }}
        QMenu::item{{
            height: 30px;
            border: none;
            background: transparent;
            padding-right: 10px;
            padding-left: 10px;
            border-radius: 4px;
            margin: 2px;
        }}
        QMenu::item:selected{{
            background: rgba(255, 255, 255, 10%);
            height: 30px;
            outline: none;
            border: none;
            padding-right: 10px;
            padding-left: 10px;
            border-radius: 4px;
        }}
        QMenu::item:disabled{{
            background: transparent;
            height: 30px;
            outline: none;
            border: none;
            color: grey;
            padding-right: 10px;
            padding-left: 10px;
            border-radius: 4px;
        }}
        QMenu::item:selected:disabled{{
            background: transparent;
            height: 30px;
            outline: none;
            border: none;
            padding-right: 10px;
            padding-left: 10px;
            border-radius: 4px;
        }}"""

        lightCSS = f"""
        * {{
            background-color: transparent;
            color: #000000;
            font-family: "Segoe UI Variable Text";
            outline: none;
        }}
        *::disabled {{
            color: gray;
        }}
        #InWindowNotification {{
            background-color: #dddddd;
            border-radius: 16px;
            height: 32px;
            border: 1px solid #bbbbbb;
        }}
        QInputDialog {{
            background-color: #f5f5f5;
        }}
        #micawin {{
            background-color: mainbg;
            color: red;
        }}
        QMenu {{
            border: 1px solid rgb(200, 200, 200);
            padding: 2px;
            outline: 0px;
            color: black;
            background: #eeeeee;
            border-radius: 8px;
        }}
        QMenu::separator {{
            margin: 2px;
            height: 1px;
            background: rgb(200, 200, 200);
        }}
        QMenu::icon{{
            padding-left: 10px;
        }}
        QMenu::item{{
            height: 30px;
            border: none;
            background: transparent;
            padding-right: 10px;
            padding-left: 10px;
            border-radius: 4px;
            margin: 2px;
        }}
        QMenu::item:selected{{
            background: rgba(0, 0, 0, 10%);
            height: 30px;
            outline: none;
            border: none;
            padding-right: 10px;
            padding-left: 10px;
            border-radius: 4px;
        }}
        QMenu::item:selected:disabled{{
            background: transparent;
            height: 30px;
            outline: none;
            border: none;
            padding-right: 10px;
            padding-left: 10px;
            border-radius: 4px;
        }}
        QMessageBox{{
            background-color: #f9f9f9;
        }}
        #greyLabel {{
            color: #404040;
        }}
        QPushButton,#FocusLabel {{
            width: 150px;
            background-color:rgba(255, 255, 255, 45%);
            border: 1px solid rgba(220, 220, 220, 55%);
            border-top: 1px solid rgba(220, 220, 220, 75%);
            border-radius: 6px;
            height: 25px;
            font-size: 9pt;
            margin: 0px;
            font-family: "Segoe UI Variable Display Semib";
        }}
        #FlatButton {{
            width: 150px;
            background-color: rgba(255, 255, 255, 0.1%);
            border-radius: 6px;
            border: 0px solid rgba(255, 255, 255, 1%);
            height: 25px;
            font-size: 9pt;
            border-top: 0px solid rgba(255, 255, 255, 1%);
        }}
        QToolTip {{
            background-color: #ffffff;
            border: 1px solid #f0f0f0;
            border-radius: 6px;
            padding: 4px;
            color: black;
        }}
        QPushButton:hover {{
            background-color: rgba(255, 255, 255, 90%);
            border: 1px solid rgba(220, 220, 220, 65%);
            border-top: 1px solid rgba(220, 220, 220, 80%);
            border-radius: 6px;
            height: 30px;
        }}
        #AccentButton{{
            color: #000000;
            font-size: 9pt;
            background-color: rgb({colors[1]});
            border-color: rgba({colors[2]}, 50%);
            border-bottom-color: rgba({colors[2]}, 50%);
            font-family: "Segoe UI Variable Display Semib";
        }}
        #AccentButton:hover{{
            background-color: rgba({colors[2]}, 80%);
            border-color: rgba({colors[3]}, 50%);
            border-bottom-color: rgba({colors[3]}, 50%);
        }}
        #AccentButton:pressed{{
            color: #000000;
            background-color: rgba({colors[3]}, 80%);
            border-color: rgba({colors[4]}, 50%);
            border-bottom-color: rgba({colors[4]}, 50%);
        }}
        #AccentButton:disabled{{
            color: #000000;
            background-color: rgba(200,200,200, 80%);
            border-color: rgb(200, 200, 200);
            border-bottom-color: rgb(200, 200, 200);
        }}
        #Headerbutton {{
            width: 150px;
            background-color:rgba(255, 255, 255, 1%);
            border-radius: 6px;
            border: 0px solid transparent;
            height: 25px;
            font-size: 9pt;
            margin: 0px;
            font-family: "Segoe UI Variable Display";
            font-size: 9pt;
        }}
        #Headerbutton:hover {{
            background-color:rgba(0, 0, 0, 5%);
            border-radius: 8px;
            height: 30px;
        }}
        #Headerbutton:checked {{
            background-color:rgba(0, 0, 0, 10%);
            border-radius: 8px;
            border: 0px solid rgba(100, 100, 100, 25%);
            height: 30px;
        }}
        #package {{
            background-color:rgba(1, 1, 1, 3%);
            border-radius: 8px;
            border: 0px solid rgba(100, 100, 100, 25%);
            height: 30px;
        }}
        #PackageButton {{
            width: 150px;
            background-color:rgba(255, 255, 255, 60%);
            border-radius: 6px;
            border: 0px solid rgba(86, 86, 86, 25%);
            height: 25px;
            font-size: 9pt;
            margin: 0px;
            font-family: "Segoe UI Variable Display Semib";
        }}
        #PackageButton:hover {{
            background-color:rgba(255, 255, 255, 100%);
            border-radius: 6px;
            border: 0px solid rgba(100, 100, 100, 25%);
            height: 30px;
        }}
        #buttonier {{
            border: 0px solid rgba(100, 100, 100, 25%);
            border-radius: 12px;
        }}
        QLineEdit {{
            background-color: rgba(255, 255, 255, 25%);
            font-family: "Segoe UI Variable Text";
            font-size: 9pt;
            width: 300px;
            color: black;
            padding: 5px;
            border-radius: 6px;
            border: 1px solid rgba(86, 86, 86, 25%);
            border-bottom: 2px solid rgb({colors[3]});
        }}
        QLineEdit:disabled {{
            background-color: rgba(255, 255, 255, 25%);
            font-family: "Segoe UI Variable Text";
            font-size: 9pt;
            width: 300px;
            padding: 5px;
            border-radius: 6px;
            border: 1px solid rgba(255, 255, 255, 55%);
        }}
        QScrollBar {{
            background: transparent;
            margin: 4px;
            margin-left: 0;
            width: 16px;
            height: 20px;
            border: none;
            border-radius: 5px;
        }}
        QScrollBar:horizontal {{
            margin-bottom: 0;
            padding-bottom: 0;
            height: 12px;
        }}
        QScrollBar:vertical {{
            background: rgba(255, 255, 255, 0%);
            margin: 4px;
            width: 16px;
            border: none;
            border-radius: 5px;
        }}
        QScrollBar::handle:vertical {{
            margin: 3px;
            border-radius: 3px;
            min-height: 20px;
            background: rgba(90, 90, 90, 25%);
        }}
        QScrollBar::handle:vertical:hover {{
            margin: 3px;
            border-radius: 3px;
            background: rgba(90, 90, 90, 35%);
        }}
        QScrollBar::add-line:vertical {{
            height: 0;
            subcontrol-position: bottom;
            subcontrol-origin: margin;
        }}
        QScrollBar::sub-line:vertical {{
            height: 0;
            subcontrol-position: top;
            subcontrol-origin: margin;
        }}
        QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {{
            background: none;
        }}
        QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{
            background: none;
        }}
        QHeaderView,QAbstractItemView {{
            background-color: rgba(255, 255, 255, 55%);
            border-radius: 6px;
            border: none;
            padding: 1px;
            height: 25px;
            border: 1px solid rgba(220, 220, 220, 55%);
            margin-bottom: 5px;
            margin-left: 0px;
            margin-right: 0px;
        }}
        QHeaderView {{
            padding-right: 0px;
        }}
        QHeaderView::section {{
            background-color: transparent;
            border-radius: 6px;
            padding: 4px;
            height: 25px;
            margin: 1px;
        }}
        QHeaderView::section:first {{
            background-color: transparent;
            border-radius: 6px;
            padding: 4px;
            height: 25px;
            margin: 1px;
            margin-left: 0px;
            padding-left: 10px;
        }}
        QTreeWidget {{
            show-decoration-selected: 0;
            background-color: transparent;
            padding: 0px;
            outline: none;
            border-radius: 6px;
            border: 0px solid rgba(240, 240, 240, 55%);
        }}
        QTreeWidget::item {{
            margin-top: 3px;
            margin-bottom: 3px;
            padding-top: 3px;
            padding-bottom: 3px;
            outline: none;
            height: 25px;
            background-color:rgba(255, 255, 255, 20%);
            border-top: 1px solid rgba(220, 220, 220, 35%);
            border-bottom: 1px solid rgba(220, 220, 220, 35%);
        }}
        QTreeWidget::item:selected {{
            margin-top: 2px;
            margin-bottom: 2px;
            padding: 0px;
            padding-top: 3px;
            padding-bottom: 3px;
            outline: none;
            background-color: rgba(255, 255, 255, 90%);
            height: 25px;
            border-bottom: 1px solid rgba(220, 220, 220, 80%);
            border-top: 1px solid rgba(220, 220, 220, 80%);
            color: rgb({colors[3]});
        }}
        QTreeWidget::branch {{
            background-color: transparent;
        }}
        QTreeWidget::item:hover {{
            margin-top: 2px;
            margin-bottom: 2px;
            padding: 0px;
            padding-top: 3px;
            padding-bottom: 3px;
            outline: none;
            background-color: rgba(255, 255, 255, 70%);
            height: 25px;
            border-bottom: 1px solid rgba(220, 220, 220, 80%);
            border-top: 1px solid rgba(220, 220, 220, 80%);
        }}
        QTreeWidget::item:first {{
            border-top-left-radius: 6px;
            border-bottom-left-radius: 6px;
            border-left: 1px solid rgba(220, 220, 220, 35%);
        }}
        QTreeWidget::item:last {{
            border-top-right-radius: 6px;
            border-bottom-right-radius: 6px;
            border-right: 1px solid rgba(220, 220, 220, 35%);
        }}
        QTreeWidget::item:first:selected {{
            border-left: 1px solid rgba(220, 220, 220, 80%);
        }}
        QTreeWidget::item:last:selected {{
            border-right: 1px solid rgba(220, 220, 220, 80%);
        }}
        QTreeWidget::item:first:hover {{
            border-left: 1px solid rgba(220, 220, 220, 80%);
        }}
        QTreeWidget::item:last:hover {{
            border-right: 1px solid rgba(220, 220, 220, 80%);
        }}
        QProgressBar {{
            border-radius: 2px;
            height: 4px;
            border: 0px;
        }}
        QProgressBar::chunk {{
            background-color: rgb({colors[3]});
            border-radius: 2px;
        }}
        QCheckBox::indicator{{
            height: 16px;
            width: 16px;
        }}
        QTreeView::indicator{{
            height:18px;
            width: 18px;
            margin: 0px;
            margin-left: 4px;
            margin-top: 2px;
        }}
        QTreeView::indicator:unchecked,QCheckBox::indicator:unchecked {{
            background-color: rgba(255, 255, 255, 25%);
            border: 1px solid rgba(0, 0, 0, 10%);
            border-radius: 4px;
        }}
        QTreeView::indicator:disabled,QCheckBox::indicator:disabled {{
            background-color: rgba(240, 240, 240, 0%);
            color: #444444;
            border: 1px solid rgba(0, 0, 0, 5%);
            border-radius: 4px;
        }}
        QTreeView::indicator:unchecked:hover,QCheckBox::indicator:unchecked:hover {{
            background-color: rgba(0, 0, 0, 5%);
            border: 1px solid rgba(0, 0, 0, 20%);
            border-radius: 4px;
        }}
        QTreeView::indicator:checked,QCheckBox::indicator:checked {{
            border: 1px solid rgb({colors[3]});
            background-color: rgb({colors[2]});
            border-radius: 4px;
            image: url("{getMedia("tick")}");
        }}
        QTreeView::indicator:checked:disabled,QCheckBox::indicator:checked:disabled {{
            border: 1px solid #444444;
            background-color: #303030;
            color: #444444;
            border-radius: 4px;
        }}
        QTreeView::indicator:checked:hover,QCheckBox::indicator:checked:hover {{
            border: 1px solid rgb({colors[3]});
            background-color: rgb({colors[3]});
            border-radius: 4px;
        }}
        QComboBox::drop-down {{
            subcontrol-origin: padding;
            subcontrol-position: top right;
            background-color: none;
            padding: 5px;
            border-radius: 6px;
            border: none;
            color: white;
            width: 30px;
        }}
        QComboBox::down-arrow {{
            image: url("{getMedia("drop-down")}");
            height: 8px;
            width: 8px;
        }}
        QComboBox::down-arrow:disabled {{
            image: url("{getMedia("drop-down")}");
            height: 2px;
            width: 2px;
        }}
        QComboBox QAbstractItemView {{
            padding: 0px;
            margin: 0px;
            outline: 0px;
            background-color: #ffffff;
            border-radius: 8px;
            color: black;
        }}
        QComboBox#transparent QAbstractItemView {{
            border: 1px solid transparent;
            background-color: transparent;
            padding: 4px;
        }}
        QComboBox QAbstractItemView::item{{
            height: 30px;
            border: none;
            padding-left: 10px;
            border-radius: 4px;
        }}
        QComboBox QAbstractItemView::item:hover{{
            background: rgba(0, 0, 0, 10%);
            height: 30px;
            outline: none;
            border: none;
            padding-left: 10px;
            color: black;
            border-radius: 4px;
        }}
        QComboBox QAbstractItemView::item:selected{{
            background: rgba(0, 0, 0, 10%);
            height: 30px;
            outline: none;
            border: none;
            padding-left: 10px;
            color: black;
            border-radius: 4px;
        }}
        QComboBox {{
            width: 150px;
            background-color:rgba(255, 255, 255, 45%);
            border: 1px solid rgba(220, 220, 220, 55%);
            border-top: 1px solid rgba(220, 220, 220, 75%);
            border-radius: 6px;
            height: 30px;
            padding-left: 10px;
            font-size: 9pt;
            margin: 0px;
        }}
        QComboBox:hover {{
            background-color: rgba(255, 255, 255, 90%);
            border: 1px solid rgba(220, 220, 220, 65%);
            border-top: 1px solid rgba(220, 220, 220, 80%);
            border-radius: 6px;
            height: 30px;
        }}
        QPlainTextEdit{{
            border: 1px solid #eeeeee;
            border-radius: 6px;
            padding: 6px;
            color: black;
            background-color: #ffffff;
            font-family: "Consolas";
        }}
        QLabel{{
            selection-background-color: rgb({colors[3]});
        }}
        QToolButton {{
            background-color:rgba(255, 255, 255, 1%);
            border-radius: 4px;
            border: 0px solid transparent;
            margin: 5px;
            margin-right: 0px;
            font-size: 9pt;
            font-family: "Segoe UI Variable Text";
            font-size: 9pt;
            padding: 4px;
        }}
        QToolButton:hover {{
            background-color:rgba(0, 0, 0, 6%);
            border-radius: 4px;
            margin: 5px;
            margin-right: 0px;
            padding: 4px;
        }}
        QToolBar:separator {{
            width: 1px;
            margin: 5px;
            margin-right: 0px;
            background-color: rgba(0, 0, 0, 10%);
        }}
        #greyishLabel {{
            color: #888888;
        }}
        #subtitleLabel{{
            background-color: rgba(255, 255, 255, 60%);
            margin: 10px;
            margin-bottom: 0;
            margin-top: 0;
            padding-left: {(20)}px;
            padding-top: {(15)}px;
            padding-bottom: {(15)}px;
            border-radius: 8px;
            border: 1 solid rgba(222, 222, 222, 50%);
            font-size: 13pt;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
        }}
        #subtitleLabelHover {{
            background-color: rgba(255, 255, 255, 1%);
            margin: 10px;
            margin-top: 0;
            margin-bottom: 0;
            border-radius: 8px;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
            border: 1px solid transparent;
        }}
        #subtitleLabelHover:hover{{
            background-color: rgba(0, 0, 0, 3%);
            margin: 10px;
            margin-top: 0;
            margin-bottom: 0;
            padding-left: {(20)}px;
            padding-top: {(15)}px;
            padding-bottom: {(15)}px;
            border: 1px solid rgba(196, 196, 196, 25%);
            font-size: 13pt;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
        }}
        #StLbl{{
            padding: 0;
            background-color: rgba(255, 255, 255, 10%);
            margin: 0;
            border:none;
            font-size: {(11)}px;
        }}
        #stBtn{{
            background-color: rgba(255, 255, 255, 5%);
            margin: 10px;
            margin-bottom: 0;
            margin-top: 0;
            border: 1px solid rgba(196, 196, 196, 25%);
            border-bottom: 0;
            border-bottom-left-radius: 0;
            border-bottom-right-radius: 0;
        }}
        #lastWidget{{
            border-bottom-left-radius: 4px;
            border-bottom-right-radius: 4px;
            border-bottom: 1px;
        }}
        #stChkBg{{
            padding: {(15)}px;
            padding-left: {(45)}px;
            background-color: rgba(255, 255, 255, 10%);
            margin: 10px;
            margin-bottom: 0;
            margin-top: 0;
            border: 1px solid rgba(196, 196, 196, 25%);
            border-bottom: 0;
        }}
        #stChk::indicator{{
            height: {(20)}px;
            width: {(20)}px;
        }}
        #stChk::indicator:unchecked {{
            background-color: rgba(255, 255, 255, 10%);
            border: 1px solid rgba(136, 136, 136, 25%);
            border-radius: 6px;
        }}
        #stChk::indicator:disabled {{
            background-color: #eeeeee;
            color: rgba(136, 136, 136, 25%);
            border: 1px solid rgba(136, 136, 136, 25%);
            border-radius: 6px;
        }}
        #stChk::indicator:unchecked:hover {{
            background-color: #eeeeee;
            border: 1px solid rgba(136, 136, 136, 25%);
            border-radius: 6px;
        }}
        #stChk::indicator:checked {{
            border: 0 solid rgba(136, 136, 136, 25%);
            background-color: rgb({colors[4]});
            border-radius: 5px;
            image: url("{getPath("tick_black.png")}");
        }}
        #stChk::indicator:checked:hover {{
            border: 0 solid rgba(136, 136, 136, 25%);
            background-color: rgb({colors[3]});
            border-radius: 5px;
            image: url("{getPath("tick_black.png")}");
        }}
        #stChk::indicator:checked:disabled {{
            border: 1px solid rgba(136, 136, 136, 25%);
            background-color: #eeeeee;
            color: rgba(136, 136, 136, 25%);
            border-radius: 6px;
            image: url("{getPath("tick_white.png")}");
        }}
        #stCmbbx {{
            width: {(100)}px;
            background-color: rgba(255, 255, 255, 10%);
            border-radius: 8px;
            border: 1px solid rgba(196, 196, 196, 25%);
            height: {(25)}px;
            padding-left: 10px;
            border-bottom: 1px solid rgba(204, 204, 204, 25%);
        }}
        #stCmbbx:disabled {{
            width: {(100)}px;
            background-color: #eeeeee;
            border-radius: 8px;
            border: 1px solid rgba(196, 196, 196, 25%);
            height: {(25)}px;
            padding-left: 10px;
            border-top: 1px solid rgba(196, 196, 196, 25%);
        }}
        #stCmbbx:hover {{
            background-color: rgba(238, 238, 238, 25%);
            border-radius: 8px;
            border: 1px solid rgba(196, 196, 196, 25%);
            height: {(25)}px;
            padding-left: 10px;
            border-bottom: 1px solid rgba(204, 204, 204, 25%);
        }}
        #stCmbbx::drop-down {{
            subcontrol-origin: padding;
            subcontrol-position: top right;
            padding: 5px;
            border-radius: 8px;
            border: none;
            width: 30px;
        }}
        #stCmbbx QAbstractItemView {{
            border: 1px solid rgba(196, 196, 196, 25%);
            padding: 4px;
            outline: 0;
            background-color: rgba(255, 255, 255, 10%);
            border-radius: 8px;
        }}
        #stCmbbx QAbstractItemView::item{{
            height: 30px;
            border: none;
            padding-left: 10px;
            border-radius: 4px;
        }}
        #stCmbbx QAbstractItemView::item:selected{{
            background: rgba(0, 0, 0, 6%);
            height: 30px;
            outline: none;
            color: black;
            border: none;
            padding-left: 10px;
            border-radius: 4px;
        }}
        #DraggableVerticalSection {{
            background-color: rgba(0, 0, 0, 17%);
            border-radius: 2px;
            margin: 5px;
            margin-bottom: 0px;
        }}
        #DraggableVerticalSection:hover {{
            background-color: rgba(0, 0, 0, 25%);
        }}
        """

        menuLightCSS = f"""
        QWidget{{
            background-color: transparent;
            menu-scrollable: 1;
            border-radius: 8px;
        }}
        QMenu {{
            font-family: "Segoe UI Variable Text";
            border: 1px solid rgb(200, 200, 200);
            padding: 2px;
            outline: 0px;
            color: black;
            icon-size: 32px;
            background: rgba(220, 220, 220, 1%)/*#262626*/;
            border-radius: 8px;
        }}
        QMenu::separator {{
            margin: -2px;
            margin-top: 2px;
            margin-bottom: 2px;
            height: 1px;
            background-color: rgba(0, 0, 0, 20%);
        }}
        QMenu::icon{{
            padding-left: 10px;
        }}
        QMenu::item{{
            height: 30px;
            border: none;
            background: transparent;
            padding-right: 20px;
            padding-left: 0px;
            border-radius: 4px;
            margin: 2px;
        }}
        QMenu::item:selected{{
            background: rgba(0, 0, 0, 10%);
            height: 30px;
            outline: none;
            border: none;
            padding-right: 20px;
            padding-left: 0px;
            border-radius: 4px;
        }}
        QMenu::item:disabled{{
            background: transparent;
            height: 30px;
            outline: none;
            color: grey;
            border: none;
            padding-right: 20px;
            padding-left: 0px;
            border-radius: 4px;
        }}
        QMenu::item:selected:disabled{{
            background: transparent;
            height: 30px;
            outline: none;
            border: none;
            padding-right: 20px;
            padding-left: 0px;
            border-radius: 4px;
        }}    
        """

        if "--daemon" in sys.argv:
            if getSettings("DisableAutostart"):
                sys.exit(0)
        try:
            translator = QTranslator()
            translator.load(f"qtbase_{langName}.qm", QLibraryInfo.path(QLibraryInfo.LibraryPath.TranslationsPath))
        except Exception as e:
            report(e)
        a = MainApplication()
        a.installTranslator(translator)
        a.exec()
        a.running = False
        sys.exit(0)
    except (ModuleNotFoundError, ImportError, FileNotFoundError) as e:
        import traceback
        tb = traceback.format_exception(*sys.exc_info())
        tracebacc = ""
        for line in tb: tracebacc += line+"\n"
        import ctypes
        ctypes.windll.user32.MessageBoxW(None, "Your WingetUI installation appears to have missing or corrupt components. Please reinstall WingetUI.\n\n"+tracebacc, "WingetUI Crash handler", 0x00000010)
except Exception as e:
    import platform
    import traceback
    import webbrowser
    if not "langName" in _globals() and not "langName" in locals():
        langName = "Unknown"
    try:
        from tools import version as appversion
    except Exception as e2:
        appversion = "Unknown"
    os_info = f"" + \
        f"                        OS: {platform.system()}\n"+\
        f"                   Version: {platform.win32_ver()}\n"+\
        f"           OS Architecture: {platform.machine()}\n"+\
        f"          APP Architecture: {platform.architecture()[0]}\n"+\
        f"                  Language: {langName}\n"+\
        f"               APP Version: {appversion}\n"+\
        f"                Executable: {sys.executable}\n"+\
        f"                   Program: WingetUI\n"+\
        f"           Program section: Main script"+\
        "\n\n-----------------------------------------------------------------------------------------"
    traceback_info = "Traceback (most recent call last):\n"
    try:
        for line in traceback.extract_tb(e.__traceback__).format():
            traceback_info += line
        traceback_info += f"\n{type(e).__name__}: {str(e)}"
    except:
        traceback_info += "\nUnable to get traceback"
    webbrowser.open(("https://www.marticliment.com/error-report/?appName=WingetUI&errorBody="+os_info.replace('\n', '{l}').replace(' ', '{s}')+"{l}{l}{l}{l}WingetUI Log:{l}"+str("\n\n\n\n"+traceback_info).replace('\n', '{l}').replace(' ', '{s}')).replace("#", "|=|"))
    print(traceback_info)
